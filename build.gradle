plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'org.javamodularity.moduleplugin' version '1.8.15'
}


group = 'org.jabref'
version = '1.0-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.3'
}

java {
    withJavadocJar()
    withSourcesJar()
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

javafx {
    version = "20"
    modules = ['javafx.base']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'easybind'
            from components.java
            pom {
                name = 'EasyBind'
                description = 'Factory methods for easy creation of JavaFX bindings using lambdas.'
                url = 'https://github.com/tobiasdiez/EasyBind'

                licenses {
                    license {
                        name = 'The BSD 2-Clause License'
                        url = 'http://opensource.org/licenses/BSD-2-Clause'
                        distribution = 'repo'
                    }
                }


                developers {
                    developer {
                        id = 'siedlerchr'
                        name = 'Christoph Schwentker'
                    }

                    developer {
                        id = 'koppor'
                        name = 'Oliver Kopp'
                    }

                    developer {
                        id = 'tobiasdiez'
                        name = 'Tobias Diez'
                    }
                    developer {
                        name = 'Tomas Mikula'
                    }
                }
                scm {
                    url = 'https://github.com/JabRef/EasyBind'
                    connection = 'scm:git:git://github.com/JabRef/EasyBind.git'
                    developerConnection = 'scm:git:git@github.com/JabRef/EasyBind.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        // This currently only works for released versions, as github has problems with overwriting snapshots
        if (isReleaseVersion) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/tobiasdiez/EasyBind"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

signing {
    required = isReleaseVersion
    useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    sign publishing.publications.mavenJava
}
nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}


test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

/* uncomment if you want to compile the test in eclipse
compileTestJava {
    moduleOptions {
        compileOnClasspath = true
    }
}
*/

tasks.withType(Javadoc).configureEach {
    // Ignore warnings because of missing elements
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}
